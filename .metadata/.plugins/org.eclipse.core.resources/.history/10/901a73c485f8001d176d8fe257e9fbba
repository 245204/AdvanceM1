package com.ust.rabbitmq.config;

import org.springframework.context.annotation.Configuration;
import org.springframework.amqp.core.AmqpTemplate;
import org.springframework.amqp.core.Binding;
import org.springframework.amqp.core.BindingBuilder;
import org.springframework.amqp.core.Queue;
import org.springframework.amqp.core.TopicExchange;
import org.springframework.amqp.rabbit.connection.ConnectionFactory;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.amqp.support.converter.Jackson2JsonMessageConverter;
import org.springframework.amqp.support.converter.MessageConverter;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;

@Configuration
public class MessagingConfig {
//	public static final String QUEUE = "ust_queue";
//	public static final String EXCHANGE = "ust_exchange";
//	public static final String ROUTING_KEY = "ust_routingKey";

	@Value("${com.ust.rabbitmq.queue}")
	public String queueName;
	@Value("${com.ust.rabbitmq.exchange}")
	public String exchange;
	@Value("${com.ust.rabbitmq.routingkey}")
	public String routingkey;
	@Bean
	public Queue queue() {
		return new Queue(queueName);
	}

	@Bean
	public TopicExchange exchange() {
		return new TopicExchange(exchange);
	}
	
	@Bean
	public Binding binding(Queue queue,TopicExchange exchange) {
		return BindingBuilder.bind(queue).to(exchange).with(routingkey);
	}

	@Bean
	public MessageConverter converter() {
		return new Jackson2JsonMessageConverter();
	}
	
	@Bean//anytime annotated with bean it is the spring container gonna call
	public AmqpTemplate template(ConnectionFactory connectionFactory) {
		//factory design pattern is ConnectionFactory
		//manages the connection between producer to consumer 
		final RabbitTemplate template=new RabbitTemplate(connectionFactory);  //BUILDING THE INSTANCE OF TEMPLATE
				template.setMessageConverter(converter());
				return template;
	}
}
